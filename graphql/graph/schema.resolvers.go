package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"poc-graphql/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, product model.NewProduct) (string, error) {
	payload, err := json.Marshal(product)
	if err != nil {
		return "", fmt.Errorf("failed to marshal input: %w", err)
	}

	resp, err := http.Post("http://localhost:8081/api/product", "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return "", fmt.Errorf("failed to call backend service: %w", err)
	}
	defer resp.Body.Close()

	// Check for expected HTTP status (e.g., 201 Created)
	if resp.StatusCode != http.StatusCreated {
		return "", fmt.Errorf("backend service returned status: %d", resp.StatusCode)
	}

	var result model.Product
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("failed to decode response: %w", err)
	}

	return result.Name, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user model.NewUser) (string, error) {
	payload, err := json.Marshal(user)
	if err != nil {
		return "", fmt.Errorf("failed to marshal input: %w", err)
	}

	resp, err := http.Post("http://localhost:8082/api/user", "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return "", fmt.Errorf("failed to call backend service: %w", err)
	}
	defer resp.Body.Close()

	// Check for expected HTTP status (e.g., 201 Created)
	if resp.StatusCode != http.StatusCreated {
		return "", fmt.Errorf("backend service returned status: %d", resp.StatusCode)
	}

	var result model.User
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("failed to decode response: %w", err)
	}

	return "created", nil
}

// GetProducts is the resolver for the getProducts field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	url := "http://localhost:8081/api/products"

	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to call external service: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("external service returned status %d", resp.StatusCode)
	}

	var products []*model.Product
	decoder := json.NewDecoder(resp.Body)
	if err := decoder.Decode(&products); err != nil {
		return nil, fmt.Errorf("failed to decode products: %v", err)
	}

	return products, nil
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	url := "http://localhost:8082/api/users"

	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to call external service: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("external service returned status %d", resp.StatusCode)
	}

	var users []*model.User
	decoder := json.NewDecoder(resp.Body)
	if err := decoder.Decode(&users); err != nil {
		return nil, fmt.Errorf("failed to decode products: %v", err)
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
